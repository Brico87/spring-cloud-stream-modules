<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg"><head><title>Dynamic Router (router)</title><link rel="stylesheet" type="text/css" href="docbook-epub.css"/><meta name="generator" content="DocBook XSL Stylesheets V1.78.1"/><link rel="prev" href="ch04s11.xhtml" title="Redis (redis)"/><link rel="next" href="ch04s13.xhtml" title="TCP Sink"/></head><body><header/><section class="section" title="Dynamic Router (router)" epub:type="subchapter" id="spring-cloud-stream-modules-sink-router"><div class="titlepage"><div><div><h2 class="title" style="clear: both">Dynamic Router (<code class="literal">router</code>)</h2></div></div></div><p>The Dynamic Router support allows for routing messages to <span class="strong"><strong>named destinations</strong></span> based on the evaluation of a SpEL
expression or Groovy Script.</p><section class="section" title="SpEL-based Routing" epub:type="division" id="_spel_based_routing"><div class="titlepage"><div><div><h3 class="title">SpEL-based Routing</h3></div></div></div><p>The expression evaluates against the message and returns either a channel name, or the key to a map of channel names.</p><p>For more information, please see the "Routers and the Spring Expression Language (SpEL)" subsection in the Spring
Integration Reference manual
<a class="link" href="http://docs.spring.io/spring-integration/reference/html/messaging-routing-chapter.html#router-namespace" target="_top">Configuring (Generic) Router section</a>.</p></section><section class="section" title="Groovy-based Routing" epub:type="division" id="_groovy_based_routing"><div class="titlepage"><div><div><h3 class="title">Groovy-based Routing</h3></div></div></div><p>Instead of SpEL expressions, Groovy scripts can also be used. Letâ€™s create a Groovy script in the file system at
"file:/my/path/router.groovy", or "classpath:/my/path/router.groovy" :</p><pre class="programlisting">println("Groovy processing payload '" + payload + "'");
if (payload.contains('a')) {
    return "foo"
}
else {
    return "bar"
}</pre><p>If you want to pass variable values to your script, you can statically bind values using the <span class="emphasis"><em>variables</em></span> option or
optionally pass the path to a properties file containing the bindings using the <span class="emphasis"><em>propertiesLocation</em></span> option.
All properties in the file will be made available to the script as variables. You may specify both <span class="emphasis"><em>variables</em></span> and
<span class="emphasis"><em>propertiesLocation</em></span>, in which case any duplicate values provided as <span class="emphasis"><em>variables</em></span> override values provided in
<span class="emphasis"><em>propertiesLocation</em></span>.
Note that <span class="emphasis"><em>payload</em></span> and <span class="emphasis"><em>headers</em></span> are implicitly bound to give you access to the data contained in a message.</p><p>For more information, see the Spring Integration Reference manual
<a class="link" href="http://docs.spring.io/spring-integration/reference/html/messaging-endpoints-chapter.html#groovy" target="_top">Groovy Support</a>.</p></section><section class="section" title="Options" epub:type="division" id="_options_25"><div class="titlepage"><div><div><h3 class="title">Options</h3></div></div></div><p>The <span class="strong"><strong>router</strong></span> sink has the following options:</p><div class="variablelist" epub:type="list"><dl class="variablelist"><dt><span class="term">destinations</span></dt><dd>comma-delimited destinations mapped from evaluation results <span class="strong"><strong>(String, no default)</strong></span></dd><dt><span class="term">defaultOutputChannel</span></dt><dd>Where to route messages where the channel cannot be resolved <span class="strong"><strong>(String, default: <code class="literal">nullChannel</code>)</strong></span></dd><dt><span class="term">expression</span></dt><dd>a SpEL expression used to determine the destination <span class="strong"><strong>(String, default: <code class="literal">headers['routeTo']</code>)</strong></span></dd><dt><span class="term">propertiesLocation</span></dt><dd>the path of a properties file containing custom script variable bindings <span class="strong"><strong>(String, no default)</strong></span></dd><dt><span class="term">refreshDelay</span></dt><dd>how often to check (in milliseconds) whether the script (if present) has changed; -1 for never <span class="strong"><strong>(long, default: <code class="literal">60000</code>)</strong></span></dd><dt><span class="term">script</span></dt><dd>reference to a script used to process messages <span class="strong"><strong>(String, no default)</strong></span></dd><dt><span class="term">destinationMappings</span></dt><dd>Destination mappings as a new line delimited string of name-value pairs, e.g. 'foo=bar\n baz=car'. <span class="strong"><strong>(String, no default)</strong></span></dd></dl></div><div class="note" title="Note" epub:type="notice"><h3 class="title">Note</h3><p>Since this is a dynamic router, destinations are created as needed; therefore, by default the <code class="literal">defaultOutputChannel</code>
and <code class="literal">resolutionRequired</code> will only be used if the <code class="literal">Binder</code> has some problem binding to the destination.</p></div><p>You can restrict the creation of dynamic bindings using the <code class="literal">spring.cloud.stream.dynamicDestinations</code> property.
By default, all resolved destinations will be bound dynamically; if this property has a comma-delimited list of
destination names, only those will be bound.
Messages that resolve to a destination that is not in this list will be routed to the <code class="literal">defaultOutputChannel</code>, which
must also appear in the list.</p><p><code class="literal">destinationMappings</code> are used to map the evaluation results to an actual destination name.</p></section></section><footer/></body></html>